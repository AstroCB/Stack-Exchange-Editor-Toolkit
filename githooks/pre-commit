#!/bin/sh
set -e

# Run unit tests
node editor.user.js test

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

commit_files=`git diff --cached --name-only --diff-filter=ACMTUXB $against`
if [ "z$commit_files" != "z" ]
then
	text_files=`echo "$commit_files" | xargs file -i | grep -vE 'binary$' | sed -E 's/: .*//g'` || true
	if [ "z$text_files" != "z" ]
	then
		# No trailing white space on any line in text files
		echo "$text_files" | xargs sed -E -i 's/[ \t]+$//g'

		# Ensure new line at end of of file
		echo "$text_files" | xargs sed -i -e '$a\'

		tab_files=`echo "$text_files" | grep -E '\.(java|php|json|pl|sh|js|css|html|vm|bte|xml|py|cpp|hpp)$'; echo "$text_files" | grep -v '\.' | xargs grep -P '\A\#\!\/[a-z\/]*\/(sh|bash|csh|tsch|perl|python[0-9]*)' -l` || true
		if [ "z$tab_files" != "z" ]
		then
			# All lines start with tabs not spaces in indented code files
			echo "$tab_files" | xargs tabfix -t -w 4
		fi

		sort_files=`echo "$text_files" | grep -E 'example-domain-words.txt|top-level-domains.txt|file-extensions.txt|stack-exchange-misspellings.txt|content-free-words.txt|stack-exchange-words.txt'` || true
		for file in $sort_files
		do
			sort $file | grep -Ev '^$' | grep -Ev '^[*+]' | uniq > temp && mv temp $file;
		done

		spelling_sort_files=`echo "$text_files" | grep -E 'spelling-corrections.txt'` || true
		for file in $spelling_sort_files
		do
			cat $file | python3 misspellings.py > temp && mv temp $file;
		done
	fi

	git add $commit_files
fi


# Check for white space errors
git diff-index --check --cached $against --
